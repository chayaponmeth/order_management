{"ast":null,"code":"// Assuming you are using MySQL with the `mysql2` package\nconst express = require('express');\nconst mysql = require('mysql2');\nconst app = express();\nconst port = 5000;\n\n// MySQL connection\nconst db = mysql.createConnection({\n  host: 'localhost',\n  user: 'root',\n  password: 'yourpassword',\n  database: 'yourdatabase'\n});\napp.use(express.json());\n\n// Get product by ID\napp.get('/api/products/:id', (req, res) => {\n  const {\n    id\n  } = req.params;\n  db.query('SELECT * FROM products WHERE id = ?', [id], (err, results) => {\n    if (err) {\n      return res.status(500).json({\n        message: 'Error fetching product',\n        error: err\n      });\n    }\n    if (results.length === 0) {\n      return res.status(404).json({\n        message: 'Product not found'\n      });\n    }\n    res.status(200).json(results[0]);\n  });\n});\n\n// Update product by ID\napp.put('/api/products/:id', (req, res) => {\n  const {\n    id\n  } = req.params;\n  const {\n    name,\n    price\n  } = req.body;\n  if (!name || !price) {\n    return res.status(400).json({\n      message: 'Name and price are required'\n    });\n  }\n  db.query('UPDATE products SET name = ?, price = ? WHERE id = ?', [name, price, id], (err, results) => {\n    if (err) {\n      return res.status(500).json({\n        message: 'Error updating product',\n        error: err\n      });\n    }\n    if (results.affectedRows === 0) {\n      return res.status(404).json({\n        message: 'Product not found'\n      });\n    }\n    res.status(200).json({\n      message: 'Product updated successfully'\n    });\n  });\n});\napp.listen(port, () => {\n  console.log(`Server running on http://localhost:${port}`);\n});","map":{"version":3,"names":["express","require","mysql","app","port","db","createConnection","host","user","password","database","use","json","get","req","res","id","params","query","err","results","status","message","error","length","put","name","price","body","affectedRows","listen","console","log"],"sources":["C:/Users/Windows-11/Documents/GitHub/order_management/frontend/src/components/EditProduct.js"],"sourcesContent":["// Assuming you are using MySQL with the `mysql2` package\r\nconst express = require('express');\r\nconst mysql = require('mysql2');\r\nconst app = express();\r\nconst port = 5000;\r\n\r\n// MySQL connection\r\nconst db = mysql.createConnection({\r\n  host: 'localhost',\r\n  user: 'root',\r\n  password: 'yourpassword',\r\n  database: 'yourdatabase',\r\n});\r\n\r\napp.use(express.json());\r\n\r\n// Get product by ID\r\napp.get('/api/products/:id', (req, res) => {\r\n  const { id } = req.params;\r\n  db.query('SELECT * FROM products WHERE id = ?', [id], (err, results) => {\r\n    if (err) {\r\n      return res.status(500).json({ message: 'Error fetching product', error: err });\r\n    }\r\n    if (results.length === 0) {\r\n      return res.status(404).json({ message: 'Product not found' });\r\n    }\r\n    res.status(200).json(results[0]);\r\n  });\r\n});\r\n\r\n// Update product by ID\r\napp.put('/api/products/:id', (req, res) => {\r\n  const { id } = req.params;\r\n  const { name, price } = req.body;\r\n\r\n  if (!name || !price) {\r\n    return res.status(400).json({ message: 'Name and price are required' });\r\n  }\r\n\r\n  db.query(\r\n    'UPDATE products SET name = ?, price = ? WHERE id = ?',\r\n    [name, price, id],\r\n    (err, results) => {\r\n      if (err) {\r\n        return res.status(500).json({ message: 'Error updating product', error: err });\r\n      }\r\n      if (results.affectedRows === 0) {\r\n        return res.status(404).json({ message: 'Product not found' });\r\n      }\r\n      res.status(200).json({ message: 'Product updated successfully' });\r\n    }\r\n  );\r\n});\r\n\r\napp.listen(port, () => {\r\n  console.log(`Server running on http://localhost:${port}`);\r\n});\r\n"],"mappings":"AAAA;AACA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,KAAK,GAAGD,OAAO,CAAC,QAAQ,CAAC;AAC/B,MAAME,GAAG,GAAGH,OAAO,CAAC,CAAC;AACrB,MAAMI,IAAI,GAAG,IAAI;;AAEjB;AACA,MAAMC,EAAE,GAAGH,KAAK,CAACI,gBAAgB,CAAC;EAChCC,IAAI,EAAE,WAAW;EACjBC,IAAI,EAAE,MAAM;EACZC,QAAQ,EAAE,cAAc;EACxBC,QAAQ,EAAE;AACZ,CAAC,CAAC;AAEFP,GAAG,CAACQ,GAAG,CAACX,OAAO,CAACY,IAAI,CAAC,CAAC,CAAC;;AAEvB;AACAT,GAAG,CAACU,GAAG,CAAC,mBAAmB,EAAE,CAACC,GAAG,EAAEC,GAAG,KAAK;EACzC,MAAM;IAAEC;EAAG,CAAC,GAAGF,GAAG,CAACG,MAAM;EACzBZ,EAAE,CAACa,KAAK,CAAC,qCAAqC,EAAE,CAACF,EAAE,CAAC,EAAE,CAACG,GAAG,EAAEC,OAAO,KAAK;IACtE,IAAID,GAAG,EAAE;MACP,OAAOJ,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACT,IAAI,CAAC;QAAEU,OAAO,EAAE,wBAAwB;QAAEC,KAAK,EAAEJ;MAAI,CAAC,CAAC;IAChF;IACA,IAAIC,OAAO,CAACI,MAAM,KAAK,CAAC,EAAE;MACxB,OAAOT,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACT,IAAI,CAAC;QAAEU,OAAO,EAAE;MAAoB,CAAC,CAAC;IAC/D;IACAP,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACT,IAAI,CAACQ,OAAO,CAAC,CAAC,CAAC,CAAC;EAClC,CAAC,CAAC;AACJ,CAAC,CAAC;;AAEF;AACAjB,GAAG,CAACsB,GAAG,CAAC,mBAAmB,EAAE,CAACX,GAAG,EAAEC,GAAG,KAAK;EACzC,MAAM;IAAEC;EAAG,CAAC,GAAGF,GAAG,CAACG,MAAM;EACzB,MAAM;IAAES,IAAI;IAAEC;EAAM,CAAC,GAAGb,GAAG,CAACc,IAAI;EAEhC,IAAI,CAACF,IAAI,IAAI,CAACC,KAAK,EAAE;IACnB,OAAOZ,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACT,IAAI,CAAC;MAAEU,OAAO,EAAE;IAA8B,CAAC,CAAC;EACzE;EAEAjB,EAAE,CAACa,KAAK,CACN,sDAAsD,EACtD,CAACQ,IAAI,EAAEC,KAAK,EAAEX,EAAE,CAAC,EACjB,CAACG,GAAG,EAAEC,OAAO,KAAK;IAChB,IAAID,GAAG,EAAE;MACP,OAAOJ,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACT,IAAI,CAAC;QAAEU,OAAO,EAAE,wBAAwB;QAAEC,KAAK,EAAEJ;MAAI,CAAC,CAAC;IAChF;IACA,IAAIC,OAAO,CAACS,YAAY,KAAK,CAAC,EAAE;MAC9B,OAAOd,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACT,IAAI,CAAC;QAAEU,OAAO,EAAE;MAAoB,CAAC,CAAC;IAC/D;IACAP,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACT,IAAI,CAAC;MAAEU,OAAO,EAAE;IAA+B,CAAC,CAAC;EACnE,CACF,CAAC;AACH,CAAC,CAAC;AAEFnB,GAAG,CAAC2B,MAAM,CAAC1B,IAAI,EAAE,MAAM;EACrB2B,OAAO,CAACC,GAAG,CAAC,sCAAsC5B,IAAI,EAAE,CAAC;AAC3D,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}